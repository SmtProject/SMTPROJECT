package com.smt.web.excelImportTable;


import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.List;

import com.smt.web.client.importExcel.ImportState;
import com.smt.web.client.toolBox.BtnFactory;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.server.FontAwesome;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Grid;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Upload;
import com.vaadin.ui.Upload.FailedEvent;
import com.vaadin.ui.Upload.SucceededEvent;

/**
 * SMT COPYRIGHT
 */
public class SmtUploadComponent extends CustomComponent
		implements Upload.SucceededListener, Upload.FailedListener, Upload.Receiver, Button.ClickListener {

	@AutoGenerated
	private HorizontalLayout mainLayout;
	@AutoGenerated
	private Label lblInfo;
	@AutoGenerated
	private Button btnSaveFile;
	@AutoGenerated
	private Upload uploadExcel;
	@AutoGenerated
	private Button btnDownloadTemplate;

	private static final long serialVersionUID = 4128149152157037573L;

	/** Storage Excel file */
	private String filename;
	private String mimeType;
	private File fileTemp;

	/** Excel file line number set */
	private int titleLineNum = 0;
	private int headerLineNum = 0;
	private int dataLineNum = 1;

	/** Export to data table */
	private Grid<String> grid;
	private SmtExcelImportTableDealHeader dealHeader;
	private ImportState role;

	public SmtUploadComponent(Grid<String> table, ImportState state) {
		this.role = state;
		buildMainLayout();
		setCompositionRoot(mainLayout);

		this.grid = table;
		initUploadComponent();
	}

	private void initUploadComponent() {
		uploadExcel.setReceiver(this);
		uploadExcel.setButtonCaption("Upload File");
		uploadExcel.addSucceededListener((Upload.SucceededListener)this);
		uploadExcel.addFailedListener((Upload.FailedListener)this);

		
		btnSaveFile.setEnabled(false);
		btnSaveFile.setDisableOnClick(true);
//		btnSaveFile.addListener((Button.ClickListener) this);

		btnDownloadTemplate.setCaption("download template");
		btnDownloadTemplate.setStyleName(Button.DESIGN_ATTR_PLAIN_TEXT);
		btnDownloadTemplate.addClickListener(downlaodTemplateListener());		
		lblInfo.setValue("Info");
		lblInfo.setVisible(false);
	}

	public OutputStream receiveUpload(String filename, String mimeType) {
		this.filename = filename;
		this.mimeType = mimeType;
		try {
			if (fileTemp == null) {
				fileTemp = createFile(filename, mimeType);
			}
			return new FileOutputStream(fileTemp);
		} catch (final FileNotFoundException e) {
			throw new RuntimeException(e);
		}
	}

	public File createFile(String fileName, String mimeType) {
		final String tempFileName = "upload_tmpfile_" + System.currentTimeMillis();
		try {
			String suffix = fileName.substring(fileName.lastIndexOf("."));
			return File.createTempFile(tempFileName, suffix);
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
	}

	public void uploadSucceeded(SucceededEvent event) {
		if (!this.filename.endsWith(".xls") && !this.filename.endsWith(".xlsx")
				&& !this.mimeType.equals("application/vnd.ms-excel")) {
			btnSaveFile.setEnabled(false);
			lblInfo.setValue("Please carefully check the file types!" + "Uploading " + filename + " of type '"
					+ mimeType + "' failed.");
			Notification.show("Upload Eroor!",
					"<br/>Please carefully check the file types!<br/>" + "Please Choose <i> '.xls ' or'.xlsx ' "
							+ "</i> file types. <br/> " + "Uploading " + filename + " of type '" + mimeType
							+ "' failed.",
					Notification.Type.WARNING_MESSAGE);
		} else {
			dealHeader = new SmtExcelImportTableDealHeader(fileTemp, grid, titleLineNum, headerLineNum, dataLineNum);
			btnSaveFile.setEnabled(true);
			lblInfo.setValue("File " + filename + " of type '" + mimeType + "' uploaded." + fileTemp.getAbsolutePath()
					+ " : " + fileTemp.getName());
		}
	}

	public void uploadFailed(FailedEvent event) {
		lblInfo.setValue("Please carefully check the file types!" + "Uploading " + filename + " of type '" + mimeType
				+ "' failed.");
		Notification.show("Upload Faild!",
				"<br/>Please carefully check the file types!<br/>" + "Please Choose <i> '.xls ' or'.xlsx ' "
						+ "</i> file types. <br/> " + "Uploading " + filename + " of type '" + mimeType + "' failed.",
				Notification.Type.WARNING_MESSAGE);
	}

	@AutoGenerated
	private HorizontalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new HorizontalLayout();
		mainLayout.setWidth("-1px");
		mainLayout.setHeight("-1px");
		mainLayout.setMargin(false);

		// top-level component properties
		setWidth("-1px");
		setHeight("-1px");

		btnDownloadTemplate = new Button();
		btnDownloadTemplate.setCaption("Download Template");
		mainLayout.addComponent(btnDownloadTemplate);
		btnDownloadTemplate.setIcon(FontAwesome.FILE_EXCEL_O);
		mainLayout.setComponentAlignment(btnDownloadTemplate, new Alignment(48));
		
		// uploadExcel
		uploadExcel = new Upload();
		uploadExcel.setWidth("-1px");
		uploadExcel.setHeight("-1px");
		mainLayout.addComponent(uploadExcel);
		mainLayout.setComponentAlignment(uploadExcel, new Alignment(48));

		// btnCheckExcel
		btnSaveFile = BtnFactory.createSaveBtn();
		btnSaveFile.setCaption("Save Uploaded File");
		mainLayout.addComponent(btnSaveFile);
		mainLayout.setComponentAlignment(btnSaveFile, new Alignment(48));

		// lblInfo
		lblInfo = new Label();
		lblInfo.setWidth("-1px");
		lblInfo.setHeight("-1px");
		lblInfo.setValue("Label");
		mainLayout.addComponent(lblInfo);
		mainLayout.setComponentAlignment(lblInfo, new Alignment(48));
		mainLayout.setSpacing(true);
		return mainLayout;
	}

	public String getExcelTitle() {
		return dealHeader.getExcelTitle();
	}

	public List<String> getExcelHeader() {
		return dealHeader.getExcelHeader();
	}

	public List<List<Object>> getExcelData() {
		return dealHeader.getExcelData();
	}

	public void setExcelLineNum(int titleLineNum, int headerLineNum, int dataLineNum) {
		this.titleLineNum = titleLineNum;
		this.headerLineNum = headerLineNum;
		this.dataLineNum = dataLineNum;
	}

	public void setCaption(String caption) {
		this.uploadExcel.setCaption(caption);
	}

	@Override
	public void buttonClick(ClickEvent event) {
		new SmtExcelContext(role, getExcelData(), getExcelHeader()).doAction();

	}
	private ClickListener downlaodTemplateListener() {
		return new Button.ClickListener() {
			private static final long serialVersionUID = 7842749587704454705L;

			public void buttonClick(ClickEvent event) {
				Grid<String> grid = new Grid<>();
				grid.setColumns(role.getImportTemplateColumns());
//				ExcelExport excelExport = new ExcelExport(new DefaultTableHolder(grid));
//				excelExport.excludeCollapsedColumns();
//				excelExport.setDisplayTotals(false);
//				excelExport.export();
			}
		};
	}
}
